var Strategy,auth,bcrypt,db,passport,setup,sql;passport=require("passport"),Strategy=require("passport-local").Strategy,bcrypt=require("bcryptjs"),db=require("./models"),sql=db.sequelize,passport.use(new Strategy(function(e,t,r){return sql.models.user.findOne({where:{name:e}}).then(function(e){var n;return e?(n=bcrypt.compareSync(t,e.password),bcrypt.compare(t,e.password,function(t,n){return n?r(null,e):r(null,!1)})):void r(null,!1)})})),passport.serializeUser(function(e,t){return t(null,e.id)}),passport.deserializeUser(function(e,t){return sql.models.user.findById(e).then(function(e){return t(null,e)})}),auth=function(e,t,r){return e.isAuthenticated()?r():t.redirect("/#frontdoor/login")},setup=function(e){return e.use(passport.initialize()),e.use(passport.session()),e.get("/login",function(e,t){t.redirect("/")}),e.post("/login",passport.authenticate("local",{failureRedirect:"/"}),function(e,t){return t.redirect("/")}),e.get("/logout",function(e,t){e.logout(),t.redirect("/")})},module.exports={setup:setup,auth:auth};